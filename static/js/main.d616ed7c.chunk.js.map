{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","components/CountryPicker/CountryPicker.jsx","api/index.js","components/Chart/Chart.jsx","App.js","index.js","App.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","images/COVID-19.png"],"names":["module","exports","container","card","infected","recovered","deaths","Cards","props","data","confirmed","lastUpdate","react_default","a","createElement","className","styles","Grid","spacing","justify","item","component","Card","xs","md","cx","CardContent","Typography","color","gutterBottom","variant","build_default","start","end","value","duration","separator","Date","toDateString","CountryPicker","_useState","useState","_useState2","Object","slicedToArray","fetchedCountries","setFetchedCountries","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","fetchCountries","t1","sent","stop","apply","this","arguments","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","handleCountryChange","target","map","country","i","key","URL","fetchData","actualURL","_yield$axios$get","_yield$axios$get$data","concat","axios","get","abrupt","console","log","_x","fetchDailyData","_ref2","_callee2","_yield$axios$get2","modifiedData","_context2","dailyData","total","date","reportDate","_ref3","_callee3","_yield$axios$get3","countries","_context3","name","Chart","setDailyData","lineChart","length","es","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","App","state","fetchedData","_this","setState","_this$state","image","src","covid_19Image","alt","components_Cards_Cards","components_CountryPicker_CountryPicker","components_Chart_Chart","React","Component","ReactDOM","render","src_App","document","getElementById","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d616ed7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3hS3z\",\"card\":\"Cards_card__47uch\",\"infected\":\"Cards_infected__2wT1P\",\"recovered\":\"Cards_recovered__1SRLm\",\"deaths\":\"Cards_deaths__1g9LQ\"};","/** \r\n * This module is the cards component.\r\n*/\r\n\r\n// Imports.\r\nimport React from 'react';\r\nimport styles from './Cards.module.css';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n/** \r\n * Cards Functional Component.\r\n*/\r\nconst Cards = (props) => {\r\n\r\n    // Retrieve data from props.\r\n    const data = props.data;\r\n    \r\n    // If confirmed is undefined on data.\r\n    if (!data.confirmed) {\r\n        \r\n        // Return the string loading.\r\n        return 'Loading...';\r\n    }\r\n\r\n    // Retrieve values from data.\r\n    const { confirmed, recovered, deaths, lastUpdate } = data;\r\n\r\n    /** \r\n     * JSX for the card component\r\n    */\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                           Infected\r\n                        </Typography>  \r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator={\",\"} />\r\n                        </Typography> \r\n                        <Typography color=\"textSecondary\">\r\n                           { new Date(lastUpdate).toDateString() }\r\n                        </Typography> \r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography> \r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>  \r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator={\",\"} />\r\n                        </Typography> \r\n                        <Typography color=\"textSecondary\">\r\n                            { new Date(lastUpdate).toDateString() }\r\n                        </Typography> \r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography> \r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>  \r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator={\",\"} />\r\n                        </Typography> \r\n                        <Typography color=\"textSecondary\">\r\n                            { new Date(lastUpdate).toDateString() }\r\n                        </Typography> \r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths caused by COVID-19\r\n                        </Typography> \r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Export the Cards functional component.\r\nexport default Cards;","/**\r\n * Country Picker Component.\r\n*/\r\n\r\n// Imports.\r\nimport React, { useState, useEffect }from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\n/**\r\n * Functional Component.\r\n*/\r\nconst CountryPicker = (props) => {\r\n\r\n    // Create the state using use state.\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    // Use effect function.\r\n    useEffect(() => {\r\n\r\n        // Fetch API async function.\r\n        const fetchAPI = async () => {\r\n\r\n            // Set the countries from the api onto the state.\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        // Invoke the function.\r\n        fetchAPI();\r\n\r\n    }, [setFetchedCountries]);\r\n\r\n    /**\r\n     * Return JSX.\r\n    */\r\n    return (\r\n       <FormControl className={styles.formControl}>\r\n\r\n           {/* Invoke the handle country change from props when on change is called. */}\r\n           <NativeSelect defaultValue=\"\" onChange={(e) => props.handleCountryChange(e.target.value)}>\r\n\r\n               {/* Map over the countries */}\r\n                {fetchedCountries.map((country, i) =>\r\n                \r\n                    // Create an option using the country.\r\n                    <option key ={i} value={country}>\r\n                        {country}\r\n                    </option>\r\n                )}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n}\r\n\r\n// Export the country picker component.\r\nexport default CountryPicker;","/** \r\n * This module is responsible for interfacing\r\n * with the API.\r\n */\r\n\r\n// Imports.\r\nimport axios from 'axios';\r\nimport CountryPicker from '../components/CountryPicker/CountryPicker';\r\n\r\n// GLOBALS\r\nconst URL = 'https://covid19.mathdro.id/api';\r\n\r\n/** \r\n * Exported function to fetch data from the api.\r\n */\r\nexport const fetchData = async (country) => {\r\n\r\n\t// Create the country url.\r\n\tlet actualURL = URL;\r\n\r\n\t// If country is defined.\r\n\tif (country) {\r\n\r\n\t\t// Update the actual URL to include the country.\r\n\t\tactualURL = `${actualURL}/countries/${country}`;\r\n\t}\r\n\r\n\r\n\ttry {\r\n\r\n\t\t// Retrieve the response from the api.\r\n\t\tconst { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(actualURL);\r\n\r\n\t\t// Return the data in a new object.\r\n\t\treturn { confirmed, recovered, deaths, lastUpdate };\r\n\r\n\t} catch (e) {\r\n\r\n\t\t// Print out the error.\r\n\t\tconsole.log(e);\r\n\t}\r\n}\r\n\r\n/** \r\n * Exported function to fetch daily data.\r\n */\r\nexport const fetchDailyData = async () => {\r\n\r\n\ttry {\r\n\r\n\t\t// Retrieve the daily data.\r\n\t\tconst { data } = await axios.get(`${URL}/daily`);\r\n\r\n\t\t// Map over each element in the data and create an concise object\r\n\t\t// With the information that is actually needed.\r\n\t\tconst modifiedData = data.map((dailyData => ({\r\n\t\t\tconfirmed: dailyData.confirmed.total\r\n\t\t\t, deaths: dailyData.deaths.total\r\n\t\t\t, date: dailyData.reportDate\r\n\t\t})));\r\n\r\n\t\t// Return the modified data.\r\n\t\treturn modifiedData;\r\n\t}\r\n\tcatch (e) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Exported function to fetch countries.\r\n */\r\nexport const fetchCountries = async () => {\r\n\r\n\ttry {\r\n\r\n\t\t// Retrieve the response and only retrieve the countries.\r\n\t\tconst { data: { countries } } = await axios.get(`${URL}/countries`);\r\n\r\n\t\t// Map over the countries to create an array of just country names.\r\n\t\treturn countries.map((country) => country.name);\r\n\r\n\t}\r\n\tcatch (e) {\r\n\r\n\t\t// Print the error.\r\n\t\tconsole.log(e);\r\n\t}\r\n}","/** \r\n * Chart Component.\r\n*/\r\n\r\n// Imports.\r\nimport React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api/';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\n/** \r\n * Functional Component.\r\n*/\r\nconst Chart = (props) => {\r\n\r\n    // Create the state using use state.\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    // Use effect function.\r\n    useEffect(() => {\r\n\r\n        // Create an async function.\r\n        const fetchAPI = async () => {\r\n\r\n            // Retrieve the data from the api and set it onto the state.\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n\r\n        // Invoke the async fetch api function.\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    // Create the line chart.\r\n    const lineChart = (\r\n\r\n        // If daily data has values in the array\r\n        dailyData.length ?\r\n        (\r\n            // Create the JXS for the line chart.\r\n            <Line \r\n                data={{\r\n                    labels: dailyData.map((data) => data.date),\r\n                    datasets: [\r\n                        \r\n                        {\r\n                            data: dailyData.map((data) => data.confirmed),\r\n                            label: 'Infected',\r\n                            borderColor: '#333fff',\r\n                            fill: true\r\n                        }\r\n                        , {\r\n                            data: dailyData.map((data) => data.deaths),\r\n                            label: 'Deaths',\r\n                            borderColor: 'red',\r\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                            fill: true\r\n                        }\r\n                    ],\r\n                }}\r\n            />\r\n        )\r\n        // Else, return null.\r\n        : null\r\n    );\r\n\r\n    // Create the bar chart.\r\n    const barChart = (\r\n\r\n        // If data confirmed is truthy.\r\n        props.data.confirmed ?\r\n        (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected' , 'Recovered', 'Deaths'],\r\n                    datasets:[{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)'\r\n                        ],\r\n                        data: [props.data.confirmed.value, props.data.recovered.value, props.data.deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: `Current state in ${props.country}`\r\n                    }\r\n                }}\r\n            />\r\n        )\r\n        // Else, return null.\r\n        : null\r\n    );\r\n\r\n    /** \r\n     * Return the JSX.\r\n    */\r\n    return (\r\n        <div className={styles.container}>\r\n            {/* If country is defined on props, display a bar chart; else, display a line chart */}\r\n            {props.country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Export the Chart component.\r\nexport default Chart;","/**\r\n * This module is the main app component.\r\n */\r\n\r\n// Imports.\r\nimport React from 'react';\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css'\r\nimport { fetchData,  } from './api';\r\nimport covid_19Image from './images/COVID-19.png';\r\n\r\n/**\r\n * The main class for the app component.\r\n * @class App\r\n * @extends {React.Component}\r\n */\r\nclass App extends React.Component {\r\n\r\n    // The state of the component.\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n\r\n    /**\r\n     * Function that is executed when the component mounts.\r\n     * Retrieve the data from the API.\r\n     * @memberof App\r\n     */\r\n    async componentDidMount() {\r\n\r\n        // Retrieve the data using the fetch data function.\r\n        const fetchedData = await fetchData();\r\n\r\n        // Set the data onto the state.\r\n        this.setState({\r\n            data: fetchedData\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches data when the country is changed.\r\n     * @param {String} country The chosen country.\r\n     * @memberof App\r\n     */\r\n    handleCountryChange = async (country) => {\r\n\r\n        // Fetch the data using the fetch data function.\r\n        const fetchedData = await fetchData(country);\r\n\r\n        // Set the state.\r\n        this.setState({\r\n            data: fetchedData,\r\n            country: country\r\n        });\r\n        \r\n    }\r\n    /**\r\n     * The render function renders the app.\r\n     * @returns The JSX for the app.\r\n     * @memberof App\r\n     */\r\n    render() {\r\n\r\n        // Retrieve the data from the state.\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={covid_19Image} alt=\"COVID-19\"/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Export the App class.\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__9v-m-\",\"image\":\"App_image__NZQMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3c2p9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__37glX\"};","module.exports = __webpack_public_path__ + \"static/media/COVID-19.d7265326.png\";"],"sourceRoot":""}